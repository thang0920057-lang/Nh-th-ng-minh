#include <SPI.h>
#include <MFRC522.h>
#include <Servo.h>

#define SS_PIN 10
#define RST_PIN 9
#define SERVO_PIN 6
#define BLOCK_NUM 4  // Block l∆∞u m·∫≠t kh·∫©u

MFRC522 mfrc522(SS_PIN, RST_PIN);
MFRC522::MIFARE_Key key;
Servo doorServo;

bool doorOpen = false; // Tr·∫°ng th√°i c·ª≠a
unsigned long openTime = 0; // L∆∞u th·ªùi gian c·ª≠a m·ªü
byte lastUID[4];       // L∆∞u UID c·ªßa th·∫ª m·ªü c·ª≠a

void setup() {
    Serial.begin(9600);
    SPI.begin();
    mfrc522.PCD_Init();
    doorServo.attach(SERVO_PIN);
    doorServo.write(0);  // C·ª≠a ƒë√≥ng ban ƒë·∫ßu

    for (byte i = 0; i < 6; i++) key.keyByte[i] = 0xFF;

    Serial.println("üîÑ ƒê·∫∑t th·∫ª g·∫ßn ƒë·∫ßu ƒë·ªçc...");
}

void loop() {
    if (!mfrc522.PICC_IsNewCardPresent()) {
        // N·∫øu c·ª≠a ƒë√£ m·ªü, ki·ªÉm tra th·ªùi gian ƒë·ªÉ t·ª± ƒë√≥ng
        if (doorOpen && millis() - openTime >= 60000) { // 2 ph√∫t = 120000 ms
            Serial.println("‚è≥ H·∫øt th·ªùi gian! ƒê√≥ng c·ª≠a t·ª± ƒë·ªông...");
            doorServo.write(0);
            doorOpen = false;
        }
        return;
    }

    if (!mfrc522.PICC_ReadCardSerial()) return;

    Serial.println("‚úÖ Th·∫ª ƒë∆∞·ª£c nh·∫≠n di·ªán!");

    // ƒê·ªçc UID th·∫ª
    byte currentUID[4];
    for (byte i = 0; i < 4; i++) {
        currentUID[i] = mfrc522.uid.uidByte[i];
    }

    byte buffer[18];
    byte size = sizeof(buffer);

    MFRC522::StatusCode status = mfrc522.PCD_Authenticate(
        MFRC522::PICC_CMD_MF_AUTH_KEY_A, BLOCK_NUM, &key, &(mfrc522.uid));
    if (status != MFRC522::STATUS_OK) {
        Serial.print("‚ùå L·ªói x√°c th·ª±c: ");
        Serial.println(mfrc522.GetStatusCodeName(status));
        return;
    }

    status = mfrc522.MIFARE_Read(BLOCK_NUM, buffer, &size);
    if (status != MFRC522::STATUS_OK) {
        Serial.print("‚ùå L·ªói ƒë·ªçc: ");
        Serial.println(mfrc522.GetStatusCodeName(status));
        return;
    }

    Serial.print("üìÑ D·ªØ li·ªáu ƒë·ªçc ƒë∆∞·ª£c: ");
    String cardData = "";
    for (byte i = 0; i < 16; i++) {
        Serial.write(buffer[i]);
        cardData += (char)buffer[i];
    }
    Serial.println();

    if (!doorOpen) {
        // N·∫øu c·ª≠a ƒëang ƒë√≥ng, ki·ªÉm tra m·∫≠t kh·∫©u ƒë·ªÉ m·ªü c·ª≠a
        if (cardData.indexOf("Hello RFID!") >= 0) {
            Serial.println("üîì M·∫≠t kh·∫©u ƒë√∫ng! M·ªü c·ª≠a...");
            doorServo.write(90);
            doorOpen = true;
            openTime = millis(); // Ghi nh·∫≠n th·ªùi gian m·ªü c·ª≠a

            // L∆∞u l·∫°i UID c·ªßa th·∫ª m·ªü c·ª≠a
            for (byte i = 0; i < 4; i++) {
                lastUID[i] = currentUID[i];
            }
        } else {
            Serial.println("‚ùå M·∫≠t kh·∫©u sai! Kh√¥ng m·ªü c·ª≠a.");
        }
    } else {
        // N·∫øu c·ª≠a ƒëang m·ªü, ki·ªÉm tra n·∫øu ƒë√∫ng th·∫ª m·ªü c·ª≠a th√¨ ƒë√≥ng l·∫°i
        bool sameCard = true;
        for (byte i = 0; i < 4; i++) {
            if (currentUID[i] != lastUID[i]) {
                sameCard = false;
                break;
            }
        }

        if (sameCard) {
            Serial.println("üîí Qu√©t l·∫°i th·∫ª! ƒê√≥ng c·ª≠a...");
            doorServo.write(0);
            doorOpen = false;
        } else {
            Serial.println("‚ö† Kh√¥ng ph·∫£i th·∫ª ƒë√£ m·ªü c·ª≠a! Kh√¥ng ƒë√≥ng.");
        }
    }

    mfrc522.PICC_HaltA();
    mfrc522.PCD_StopCrypto1();
}
